--[[

    ========================================================
    Voc√™ empunha sua espada e se prepara para lutar.
    √â hora da batalha!

    | Prismarine Colossus
    |
    | Enormes est√°tuas de prismarine que medem mais de 20 metros de altura. Sua apar√™ncia amea√ßadora pode assustar at√© os mais bravos guerreiros.
    | Eles t√™m olhos turquesa brilhantes, mas um elogio n√£o vai te ajudar muito durante uma batalha.
    |
    | Atributos:
    | Vida          ‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è
    | Ataque        ‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ
    | Defesa        ‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è
    | Agilidade     ‚óªÔ∏è‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ

    O que voc√™ vai fazer?
    1. Atacar com a espada.
    2. Usar uma po√ß√£o de regenera√ß√£o.
    3. Atirar uma pedra.
    4. Se esconder.
    >

]]

-- Dependencies
local utils = require "utils"
local player = require "player.player"
local playerActions = require "player.actions"
local colossus = require "colossus.colossus"
local colossusActions = require "colossus.actions"

-- Habilitar UTF-8 no terminal
utils.enableUtf8()

-- Header
utils.printHeader()

-- Obter a defini√ß√£o do monstro
local boss = colossus
local bossActions = colossusActions

-- Loop para perguntar repetidamente ao usu√°rio o nome do jogador, at√© que um nome v√°lido seja retornado
print("Seja bem vindo ao simulador de batalha, qual nome quer dar ao seu personagem?")
local choosenPlayerName
local isplayerNameValid, invalidNameMessage
repeat
    choosenPlayerName = utils.askPlayerName()
    isplayerNameValid, invalidNameMessage = utils.checkIsValidPlayerName(choosenPlayerName)
    if not isplayerNameValid then
        print(invalidNameMessage)
    end
until isplayerNameValid

-- Define o nome do jogador ap√≥s a valida√ß√£o acima
player.name = choosenPlayerName
print()
print(string.format("Nome do jogador definido como: %s!", player.name))
print()

-- Procura ao usuario qual classe ele quer pro seu personagem
print(string.format("Ei %s, escolha uma classe para seu personagem:", player.name))
print()
for i, v  in pairs(player.jobType) do
    print(string.format("   * %d. %s", i, v.race))
end
print()

local choosenJob
local isValidJob, invalidJobMessage
repeat
    choosenJob = utils.ask()
    isValidJob, invalidJobMessage = utils.checkIsValidJob(choosenJob)
    if not isValidJob then
        print(invalidJobMessage)
    end
until isValidJob

-- Define os atributos do jogador de acordo com a classe escolhida e mostra uma breve mensagem.
utils.playerAttrSet(player, choosenJob)

-- Apresentar o jogador
utils.printPlayer(player)
print()

-- Apresentar o monstro
utils.printCreature(boss)
print()

-- Build actions
playerActions.build()
bossActions.build()

-- Come√ßar o loop de batalha
while true do
    -- Mostrar a√ß√µes para o jogador
    print()
    print(string.format("Qual ser√° sua pr√≥xima a√ß√£o %s?", player.name))
    local validPlayerActions = playerActions.getValidActions(player, boss)
    for i, action in pairs(validPlayerActions) do
        print(string.format("%d. %s", i, action.description))
    end

    local chosseIndex = utils.ask()
    local chosenAction = validPlayerActions[chosseIndex]
    local isActionValid = chosenAction ~= nil

    -- Simular o turno do jogador
    if isActionValid then
        chosenAction.execute(player, boss)
    else
        print(string.format("Sua escolha √© inv√°lida. %s perdeu a vez.", player.name))
    end

    -- TODO
    -- Ponto de sa√≠da: Criatura ficou sem vida.
    if boss.health <= 0 then
        break
    end

    -- Simular o turno da criatura
    print()
    local validBossActions = bossActions.getValidActions(player, boss)
    local bossAction = validBossActions[math.random(#validBossActions)]
    bossAction.execute(player, boss)

    -- Ponto de sa√≠da: Jogador ficou sem vida.
    if player.health <= 0 then
        break
    end
end

-- Processar condi√ß√µes de vit√≥ria e derrota
if player.health <= 0 then
    print("--------------------------------------------------------------------------------------")
    print()
    print("üò¢")
    print(string.format("%s n√£o foi capaz de vencer {%s}.", player.name, boss.name))
    print("Quem sabe na pr√≥xima batalha...")
    print()
elseif boss.health <= 0 then
    print("--------------------------------------------------------------------------------------")
    print()
    print("üòÅ")
    print(string.format("%s prevaleceu e venceu o chefe {%s}.", player.name, boss.name))
    print("Parab√©ns!!!!")
    print()
end
